%% -*- erlang -*-
%% Copyright (c) 2008-2009 Nicolas Charpentier
main([Mode, Application, Type |Paths]) ->
    run(Mode, Application, Type, Paths);
main(_) ->
    usage().

run(Mode, Application, Type, Paths) ->
    F = execution_fun(Mode, Application, Type),
    try
	[code:add_path(Path) || Path <- Paths],
	ok = F()
    catch
        E:R ->
	    exit({E,R,erlang:get_stacktrace()})
    end.

execution_fun("test", Application, Type) ->
    fun() -> run_test(Application, Type) end;
execution_fun("cover", Application, Type) ->
    Fun = fun() -> ok = run_test(Application, Type) end,
    fun () ->
	    Sources = filename:join(code:lib_dir(Application),"src"),
	    Out = filename:join(code:lib_dir(Application),"cover"),
	    Options = [{directories,[Sources]},{output_directory,Out}],
	    ok = application:load(list_to_atom(Application)),
	    cover(Fun, Options) end.

        
run_test(Application, "all_tests") ->
    eunit:test({application, list_to_atom(Application)},[]);
run_test(_, File) ->
    eunit:test({file, File},[]).
    
usage() ->
    io:format("usage: run_test \"test\"|\"cover\" <application_name>  <\"all_tests\"|test_description_file> <application_path>\n"),
    halt(1).

cover(Fun, Options) ->
    Directories = proplists: get_value(directories, Options, []),

    [cover:compile_directory(D) || D <- Directories],
    try Fun() of
	ok -> ok
    catch E:R ->
	    exit({E,R,erlang:get_stacktrace()})
    after
	report(Options)
    end.

report(Options) ->
    F = fun(M) ->
		App = case application:get_application(M) of
			  {ok, X} -> X;
			  _ -> undefined
		      end,
		Analyse = cover:analyse(M,calls,line),
		{App, M, Analyse}
	end,
    Results = [F(M) || M <- cover:modules()],
    Coverage = cover_to_xml(Results), 
    Export = xmerl:export_simple([{cover, Coverage}], xmerl_xml),
    
    Output_directory = proplists: get_value(output_directory, Options, "."),
    Directory_name = filename:absname(Output_directory),
    ok = filelib:ensure_dir(Directory_name),
    file:make_dir(Directory_name),
    true = filelib:is_dir(Directory_name),

    Summary_file = filename:join(Output_directory, "cover_tool.xml"),
    file:write_file(Summary_file, Export),
    
    HTML_file = fun(M) ->
			filename:join(Directory_name, atom_to_list(M) ++".COVER.html")
		end,
    [cover:analyse_to_file(M, HTML_file(M), [html]) || M <-cover:modules()],
    ok.

cover_to_xml(Results) ->
    [cover_to_xml(App, M, Lines) || {App,M,{ok,Lines}} <- Results].

cover_to_xml(App, Module, Lines) ->
    F = fun({_,0}) -> false;
	   (_) -> true end,

    Called = length(lists:filter(F, Lines)),
    Uncalled = length(Lines) - Called,
    {module,[{application, App},{name,Module}], [{lines,[{called, Called}, {uncalled, Uncalled}],[]}]}.
